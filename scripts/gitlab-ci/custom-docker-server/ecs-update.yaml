stages:
  - test-build
  - push-image
  - dev-deploy
  # - stage-deploy
  # - prod-deploy

test-build:
  stage: test-build
  image: rgahub/docker-bash:latest # docker:latest image with bash installed 
  script:
    # these values need to be set as Gitlab Variables:
    # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DOCKER_SG_ID, AWS_REGION           <<< Add in GitLab
    # set variables
    - export IMAGE_PORT=80 && echo $IMAGE_PORT #                                       <<< Set IMAGE_PORT
    - export IMAGE_NAME=container_image && echo $IMAGE_NAME #                          <<< Set IMAGE_NAME
    - export HEALTHCHECK_PATH=/status && echo $HEALTHCHECK_PATH #                      <<< Set HEALTHCHECK_PATH
    - export DOCKER_SERVER=docker.server.com && echo $DOCKER_SERVER #                  <<< Set DOCKER_SERVER
    - export HEALTHCHECK_STATUS_MSG='"status":"ok"' #                                 <<< Set HEALTHCHECK_STATUS_MSG
    # export environment
    - export BUILD_NUMBER=0.${CI_PIPELINE_ID}.${CI_BUILD_REF_NAME} && echo BUILD_NUMBER $BUILD_NUMBER
    - export BUILD_IMAGE_NAME=${IMAGE_NAME}-${BUILD_NUMBER}
    - export DOCKER_HOST=tcp://${DOCKER_SERVER}:2376 && echo DOCKER_HOST $DOCKER_HOST
    - export DOCKER_TLS_VERIFY=1 && echo DOCKER_TLS_VERIFY $DOCKER_TLS_VERIFY
    # set up aws credentials
    - mkdir -p ~/.aws/
    - printf "[default]\naws_access_key_id=${AWS_ACCESS_KEY_ID}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" > ~/.aws/credentials;
    - printf "[default]\nregion=$AWS_REGION\n" > ~/.aws/config;
    # set up docker credentials
    - mkdir -p ~/.docker/ && cp ops/docker/keys/* ~/.docker/
    # open up docker access to security group
    - EXTERNAL_IP=$(curl -s ipinfo.io/ip) && echo EXTERNAL_IP $EXTERNAL_IP
    - DOCKER_SG_LOOKUP=$(aws ec2 describe-security-groups --group-ids $AWS_DOCKER_SG_ID --filter Name=ip-permission.cidr,Values=$EXTERNAL_IP/32 Name=ip-permission.from-port,Values=2376 --output text --query "SecurityGroups[].GroupId" --region ${AWS_REGION}) && echo DOCKER_SG_LOOKUP $DOCKER_SG_LOOKUP
    - if [ -z $DOCKER_SG_LOOKUP ]; then aws ec2 authorize-security-group-ingress --group-id $AWS_DOCKER_SG_ID --cidr $EXTERNAL_IP/32 --protocol tcp --port 2376; else echo already authorized; fi
    # docker client and server status
    - docker version
    # get access to aws ecr
    - DOCKER_LOGIN=$(aws ecr get-login --region ${AWS_REGION})
    - eval $DOCKER_LOGIN
    # build image
    - docker build -t ${BUILD_IMAGE_NAME} .
    - CONTAINER_ID=$(docker run -d -ti --rm ${BUILD_IMAGE_NAME})
    # wait for container to start
    - sleep 5
    # test healthcheck error code
    - ERROR_CODE=$(docker exec $CONTAINER_ID bash -c "curl -s --head localhost:${IMAGE_PORT}${HEALTHCHECK_PATH}" | grep -i '200 OK') && echo ERROR_CODE $ERROR_CODE
    - if [ -z "$ERROR_CODE" ]; then echo "healthcheck CODE failed"; docker stop ${CONTAINER_ID} && docker rmi -f ${BUILD_IMAGE_NAME}; exit 1; else echo "healthcheck CODE passed"; fi
    # test healthcheck error status message
    - ERROR_STATUS=$(docker exec $CONTAINER_ID bash -c "curl -s localhost:${IMAGE_PORT}${HEALTHCHECK_PATH}" | grep -i ${HEALTHCHECK_STATUS_MSG}) && echo ERROR_STATUS $ERROR_STATUS
    - if [ -z "$ERROR_STATUS" ]; then echo "healthcheck STATUS failed"; docker stop ${CONTAINER_ID} && docker rmi -f ${BUILD_IMAGE_NAME}; exit 1; else echo "healthcheck STATUS passed"; fi
    # clean up running container
    - docker stop ${CONTAINER_ID}
    # close access to security group
    - aws ec2 revoke-security-group-ingress --group-id $AWS_DOCKER_SG_ID --cidr $EXTERNAL_IP/32 --protocol tcp --port 2376
    - if [ "$CI_PIPELINE_ID" != master ]; then echo cleaning up images...; docker rmi -f ${BUILD_IMAGE_NAME}; fi
    # - if [ "$CI_PIPELINE_ID" != master ] && [ "$CI_PIPELINE_ID" != stage ] && [ "$CI_PIPELINE_ID" != develop ]; then echo cleaning up images...; docker rmi -f ${BUILD_IMAGE_NAME}; fi

push-image:
  stage: push-image
  image: rgahub/docker-bash:latest
  script:
    # set variables
    - export IMAGE_PORT=80 && echo $IMAGE_PORT #                                       <<< Set IMAGE_PORT
    - export DOCKER_SERVER=docker.server.com && echo $DOCKER_SERVER #                  <<< Set DOCKER_SERVER
    - export ACCOUNT_ID=account && echo $ACCOUNT_ID #                                  <<< Set ACCOUNT_ID
    # export environment
    - export ECS_REPO=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com && echo ECS_REPO $ECS_REPO
    - export BUILD_NUMBER=0.${CI_PIPELINE_ID}.${CI_BUILD_REF_NAME} && echo BUILD_NUMBER $BUILD_NUMBER
    - export BUILD_IMAGE_NAME=${IMAGE_NAME}-${BUILD_NUMBER}
    - export DOCKER_HOST=tcp://${DOCKER_SERVER}:2376 && echo DOCKER_HOST $DOCKER_HOST
    - export DOCKER_TLS_VERIFY=1 && echo DOCKER_TLS_VERIFY $DOCKER_TLS_VERIFY
    # set up aws credentials
    - mkdir -p ~/.aws/
    - printf "[default]\naws_access_key_id=${AWS_ACCESS_KEY_ID}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" > ~/.aws/credentials;
    - printf "[default]\nregion=$AWS_REGION\n" > ~/.aws/config;
    # set up docker credentials
    - mkdir -p ~/.docker/ && cp ops/docker/keys/* ~/.docker/
    # open up access to security group
    - EXTERNAL_IP=$(curl -s ipinfo.io/ip) && echo EXTERNAL_IP $EXTERNAL_IP
    - SG_LOOKUP=$(aws ec2 describe-security-groups --group-ids $AWS_DOCKER_SG_ID --filter Name=ip-permission.cidr,Values=$EXTERNAL_IP/32 Name=ip-permission.from-port,Values=2376 --output text --query "SecurityGroups[].GroupId" --region ${AWS_REGION}) && echo SG_LOOKUP $SG_LOOKUP
    - if [ -z $SG_LOOKUP ]; then aws ec2 authorize-security-group-ingress --group-id $AWS_DOCKER_SG_ID --cidr $EXTERNAL_IP/32 --protocol tcp --port 2376; else echo already authorized; fi
    # docker client and server status
    - docker version
    # get access to aws ecr
    - DOCKER_LOGIN=$(aws ecr get-login --region ${AWS_REGION})
    - eval $DOCKER_LOGIN
    # tag and push image
    - docker tag ${BUILD_IMAGE_NAME} ${ECS_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
    - docker push ${ECS_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
    # clean up images
    - docker rmi -f ${BUILD_IMAGE_NAME}
    - docker rmi -f ${ECS_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
    # close access to security group
    - aws ec2 revoke-security-group-ingress --group-id $AWS_DOCKER_SG_ID --cidr $EXTERNAL_IP/32 --protocol tcp --port 2376
  only:
    - master

dev-deploy:
  stage: dev-deploy
  image: rgahub/docker-bash:latest
  script:
    # set variables
    - export ENV=dev
    # export environment variables
    - export BUILD_NUMBER=0.${CI_PIPELINE_ID}.${CI_BUILD_REF_NAME} && echo BUILD_NUMBER $BUILD_NUMBER
    # set up aws credentials
    - mkdir -p ~/.aws/
    - printf "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials;
    - printf "[default]\nregion=$AWS_REGION\n" > ~/.aws/config;
    # set script permissions
    - chmod +x deploy.sh ops/scripts/aws-stack-check.sh
    # kick off update stack
    - ./deploy.sh -d -s -e ${ENV} -t ${BUILD_NUMBER} -r ${AWS_REGION}
  only:
    - master
  environment:
    name: DEV Application Server
    url: http://proj-dev.site.com/

# stage-deploy:
#   stage: stage-deploy
#   image: rgahub/docker-bash:latest
#   script:
#     # set variables
#     - export ENV=stg
#     # export environment variables
#     - export BUILD_NUMBER=0.${CI_PIPELINE_ID}.${CI_BUILD_REF_NAME} && echo BUILD_NUMBER $BUILD_NUMBER
#     # set up aws credentials
#     - mkdir -p ~/.aws/
#     - printf "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials;
#     - printf "[default]\nregion=$AWS_REGION\n" > ~/.aws/config;
#     # set script permissions
#     - chmod +x deploy.sh ops/scripts/aws-stack-check.sh
#     # kick off update stack
#     - ./deploy.sh -d -s -e ${ENV} -t ${BUILD_NUMBER} -r ${AWS_REGION}
#   only:
#     - master
#   environment:
#     name: STG Application Server
#     url: http://proj-stg.site.com/

# prod-deploy:
#   stage: prod-deploy
#   image: rgahub/docker-bash:latest
#   script:
#     # set variables
#     - export ENV=prd
#     # export environment variables
#     - export BUILD_NUMBER=0.${CI_PIPELINE_ID}.${CI_BUILD_REF_NAME} && echo BUILD_NUMBER $BUILD_NUMBER
#     # set up aws credentials
#     - mkdir -p ~/.aws/
#     - printf "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials;
#     - printf "[default]\nregion=$AWS_REGION\n" > ~/.aws/config;
#     # set script permissions
#     - chmod +x deploy.sh ops/scripts/aws-stack-check.sh
#     # kick off update stack
#     - ./deploy.sh -d -s -e ${ENV} -t ${BUILD_NUMBER} -r ${AWS_REGION}
#   only:
#     - master
#   environment:
#     name: PRD Application Server
#     url: http://proj-prd.site.com/
#   when: manual
