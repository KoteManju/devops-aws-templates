AWSTemplateFormatVersion: '2010-09-09'
Description: v0.2; Cloudformation template that builds an EC2 instance to support
  a JETTY SERVER
Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: ami-f61a9ef6
    ap-southeast-1:
      AMI: ami-2e4b427c
    ap-southeast-2:
      AMI: ami-f17b39cb
    eu-central-1:
      AMI: ami-b4b0b7a9
    eu-west-1:
      AMI: ami-08d18e7f
    sa-east-1:
      AMI: ami-25098138
    us-east-1:
      AMI: ami-0d4cfd66
    us-west-1:
      AMI: ami-fdea13b9
    us-west-2:
      AMI: ami-abc5d19b
Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - EC2Instance
          - PublicDnsName
Parameters:
  AllowSSHFrom:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    # Default: x.x.x.x/32
    Description: The net block (CIDR) that SSH is available to
    MaxLength: '18'
    MinLength: '9'
    Type: String
  CreateStackName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_./\-]*'
    ConstraintDescription: must begin with a letter and can contain alphanumeric characters
      including the following _ - . / \ (should be at least 3 characters long).
    Description: Name of Stack
    MaxLength: '255'
    MinLength: '3'
    Type: String
  EC2InstanceType:
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t2.micro
    Description: EC2 HVM instance type (recommended size is t2.micro for non-production
      servers).
    Type: String
  EC2KeyPair:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: rga-internal
    Description: The name of an EC2 Key Pair to allow SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
  TagValueClient:
    Description: Name of the client (should be at least 3 characters long).
    MaxLength: '255'
    MinLength: '3'
    Type: String
  TagValueEnvironment:
    AllowedValues:
    - dev
    - qa
    - stg
    - prd
    - test
    Default: dev
    Description: Describe the environment as dev, qa, stg, prd
    Type: String
  TagValueOwner:
    Default: '@rga.com'
    Description: Email address of the owner (should be at least 3 characters long).
    MaxLength: '255'
    MinLength: '3'
    Type: String
Resources:
  EC2Instance:
    DependsOn: EC2SecurityGroup
    Metadata:
      AWS::CloudFormation::Init:
        RunConfig:
          commands: {}
          files:
            /etc/nginx/nginx.conf:
              content:
                Fn::Join:
                - ''
                - - 'user  nginx;

                    '
                  - 'worker_processes  1;

                    '
                  - '

                    '
                  - 'error_log  /var/log/nginx/error.log;

                    '
                  - 'pid        /var/run/nginx.pid;

                    '
                  - '

                    '
                  - 'events {

                    '
                  - '    worker_connections  1024;

                    '
                  - '}

                    '
                  - '

                    '
                  - 'http {

                    '
                  - '    include       /etc/nginx/mime.types;

                    '
                  - '    default_type  application/octet-stream;

                    '
                  - '    log_format  main  ''$remote_addr - $remote_user [$time_local]
                    "$request" ''

                    '
                  - '                      ''$status $body_bytes_sent "$http_referer"
                    ''

                    '
                  - '                      ''"$http_user_agent" "$http_x_forwarded_for"'';

                    '
                  - '

                    '
                  - '    access_log  /var/log/nginx/access.log  main;

                    '
                  - '    sendfile        on;

                    '
                  - '    keepalive_timeout  65;

                    '
                  - '    include /etc/nginx/conf.d/*.conf;

                    '
                  - '    index   index.html index.htm;

                    '
                  - '

                    '
                  - '    server {

                    '
                  - '        listen       80;

                    '
                  - '        server_name  localhost;

                    '
                  - '        root         /usr/share/nginx/html;

                    '
                  - '        location / {

                    '
                  - '           proxy_set_header X-Real-IP  $remote_addr;

                    '
                  - '           proxy_set_header X-Forwarded-For $remote_addr;

                    '
                  - '           proxy_set_header Host $host;

                    '
                  - '           proxy_pass http://127.0.0.1:8080;

                    '
                  - '        }

                    '
                  - '        error_page  404              /404.html;

                    '
                  - '        location = /40x.html {

                    '
                  - '        }

                    '
                  - '        error_page   500 502 503 504  /50x.html;

                    '
                  - '        location = /50x.html {

                    '
                  - '        }

                    '
                  - '    }

                    '
                  - '}

                    '
              group: root
              mode: '000644'
              owner: root
        RunInstall:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource EC2Instance '
                  - '         --configsets InstallAndConfigure '
                  - '         --region '
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
          packages:
            yum:
              emacs: []
              nginx: []
              screen: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/nginx/nginx.conf
                - /etc/nginx/.htpasswd
        configSets:
          InstallAndConfigure:
          - RunInstall
          - RunConfig
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      InstanceType:
        Ref: EC2InstanceType
      KeyName:
        Ref: EC2KeyPair
      SecurityGroupIds:
      - Fn::GetAtt:
        - EC2SecurityGroup
        - GroupId
      SubnetId:
        Fn::Select:
        - '0'
        - Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - Subnets
      Tags:
      - Key: Name
        Value:
          Ref: CreateStackName
      - Key: resource
        Value:
          Fn::Join:
          - ''
          - - Ref: CreateStackName
            - -EC2Instance
      - Key: environment
        Value:
          Ref: TagValueEnvironment
      - Key: owner
        Value:
          Ref: TagValueOwner
      - Key: client
        Value:
          Ref: TagValueClient
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -xe

              '
            - 'exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console)
              2>&1

              '
            - 'yum update -y aws-cfn-bootstrap

              '
            - '# Install the files and packages from the metadata

              '
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource EC2Instance '
            - '         --configsets InstallAndConfigure '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
            - 'yum update -y

              '
            - "# Update Java to 1.8 \n"
            - 'sudo yum remove java-1.7.0-openjdk

              '
            - 'sudo yum install java-1.8.0

              '
            - '# Install Jetty

              '
            - 'cd /tmp/

              '
            - 'wget http://download.eclipse.org/jetty/stable-9/dist/jetty-distribution-9.3.8.v20160314.tar.gz

              '
            - 'tar xvf jetty-distribution-9.3.8.v20160314.tar.gz

              '
            - 'mv jetty-distribution-9.3.8.v20160314 /opt/jetty/

              '
            - 'useradd -m jetty

              '
            - 'chown -R jetty:jetty /opt/jetty/

              '
            - 'ln -s /opt/jetty/bin/jetty.sh /etc/init.d/jetty

              '
            - 'chkconfig --add jetty

              '
            - 'chkconfig --level 345 jetty on

              '
            - 'echo -e "JETTY_HOME=/opt/jetty

              JETTY_USER=jetty

              JETTY_PORT=8080

              JETTY_HOST=127.0.0.1

              JETTY_LOGS=/opt/jetty/logs/

              " > /etc/default/jetty

              '
            - 'service jetty start

              '
            - 'service nginx restart

              '
            - '# Signal the status from cfn-init

              '
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource EC2Instance '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
    Type: AWS::EC2::Instance
  EC2SecurityGroup:
    Properties:
      GroupDescription: Security group for EC2
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      - CidrIp: 0.0.0.0/0
        FromPort: '3306'
        IpProtocol: tcp
        ToPort: '3306'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      - CidrIp:
          Ref: AllowSSHFrom
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      Tags:
      - Key: Name
        Value:
          Ref: CreateStackName
      - Key: resource
        Value:
          Fn::Join:
          - ''
          - - Ref: CreateStackName
            - -EC2SecurityGroup
      - Key: environment
        Value:
          Ref: TagValueEnvironment
      - Key: owner
        Value:
          Ref: TagValueOwner
      - Key: client
        Value:
          Ref: TagValueClient
      VpcId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - VPC
    Type: AWS::EC2::SecurityGroup
  InstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole
    Type: AWS::IAM::InstanceProfile
  InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      Path: /
    Type: AWS::IAM::Role
  RolePolicies:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Effect: Allow
          Resource:
          - arn:aws:logs:*:*:*
          - arn:aws:elasticloadbalancing:*:*:loadbalancer/*
        - Action: elasticloadbalancing:Describe*
          Effect: Allow
          Resource: '*'
      PolicyName: S3Download
      Roles:
      - Ref: InstanceRole
    Type: AWS::IAM::Policy
