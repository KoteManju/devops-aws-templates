---
AWSTemplateFormatVersion: 2010-09-09
Description: GoCD Agent - template built for HA and FT. version 0.03
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Parameters
      Parameters:
      # - ParentVPCStack
      - VPC
      - PublicSubnet1
      - PublicSubnet2
    - Label:
        default: GoCD Parameters
      Parameters:
      - GoCDServerInstanceSGId
      - GoCDServerPrivateIP
    - Label:
        default: EC2 Parameters
      Parameters:
      - BuildVersion
      - WebServerKeyName
      - WebServerInstanceType
      - SSHLocation
      - ExternalIP
    - Label:
        default: Stack Tags
      Parameters:
      - TagName
      - TagOwner
      - TagClient
      - TagProject
      - TagEnvironment
Parameters:
  # ParentVPCStack:
  #   Description: Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.
  #   Type: String
  VPC:
    Description: VPC ID for the stack.
    Type: AWS::EC2::VPC::Id
    Default: vpc-id
  PublicSubnet1:
    Description: First Public subnet you want to use.
    Type: AWS::EC2::Subnet::Id
    Default: subnet-id
  PublicSubnet2:
    Description: Second Public subnet you want to use.
    Type: AWS::EC2::Subnet::Id
    Default: subnet-id
  GoCDServerInstanceSGId:
    Description: The Security Group Id of the GoCD Server Instances
    Type: String
  GoCDServerPrivateIP:
    Description: The host name of the GoCD Server - should not include protocol or path
    Type: String
  BuildVersion:
    Description: The build version for this template.
    Type: String
    Default: 0.01
  WebServerKeyName:
    Description: Optional key pair of the ec2-user to establish a SSH connection to the web server.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  WebServerInstanceType:
    Description: The instance type of web servers (e.g. t2.micro).
    Type: String
    Default: t2.medium
    AllowedValues: [ 't2.micro', 't2.small', 't2.medium', 't2.large', 'm4.large', 'm4.xlarge', 'm4.2xlarge', 'm4.4xlarge' ]
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  ExternalIP:
    Description: The IP address range that can be used to access the instance from
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  TagName:
      Description: Tag used for Name of the resource
      Type: String
      MinLength: 1
      MaxLength: 127
      Default: tag-name
  TagClient:
    Description: Tag used for Client of the resource
    Type: String
    MinLength: 1
    MaxLength: 127
    Default: tag-client
  TagOwner:
    Description: Tag used for Owner of the resource
    Type: String
    MinLength: 1
    MaxLength: 127
    Default: name@email.com
  TagProject:
    Description: Tag used for Project of the resource
    Type: String
    MinLength: 1
    MaxLength: 127
    Default: tag-project
  TagEnvironment:
    Description: Tag used for Environment of the resource
    Type: String
    MinLength: 1
    MaxLength: 127
    Default: tag-env

Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-22ce4934
    us-west-1:
      HVM64: ami-9e247efe
    us-west-2:
      HVM64: ami-8ca83fec
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64

Resources:
  WebServerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 5

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref TagOwner
          Protocol: email

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-gocd-ec2-sg
      VpcId:
        # Fn::ImportValue: !Sub ${ParentVPCStack}-VPC
        !Ref VPC
      SecurityGroupIngress:
      - FromPort: 8153
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref GoCDServerInstanceSGId
        ToPort: 8153
      - FromPort: 8154
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref GoCDServerInstanceSGId
        ToPort: 8154
      - FromPort: 22
        IpProtocol: tcp
        CidrIp: !Ref SSHLocation
        ToPort: 22
      - FromPort: -1
        IpProtocol: icmp
        CidrIp: !Ref ExternalIP
        ToPort: -1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ec2-sg
      - Key: owner
        Value: !Ref TagOwner
      - Key: client
        Value: !Ref TagClient
      - Key: project
        Value: !Ref TagProject
      - Key: environment
        Value: !Ref TagEnvironment

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebServerIAMRole

  WebServerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:AuthorizeSecurityGroupEgress
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:DescribeSecurityGroups
            Resource:
            - "*"

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - config
          - gocd
          # - aws
        config:
          packages:
              yum:
                emacs: []
                screen: []
          files:
            '/etc/cron.daily/yumupdate':
              content: !Sub |
                #!/bin/bash -xe
                YUM=/usr/bin/yum
                # -y == assume yes
                # -d == debug verbosity
                # -e == error-reporting level
                # -R == wait 0~n min before running the command (randomise)
                # clear all packages, dependency headers, metadata and metadata cache
                $YUM -y -d 0 -e 0 clean all
                # update the yum package itself
                $YUM -y -d 0 -e 0 update yum
                # update everything
                $YUM -y -R 10 -e 0 -d 0 update --security
                #IF YOU JUST WANT TO INSTALL SECURITY UPDATES ADD â€”security
                yum -y update --security
              mode: '000500'
              owner: root
              group: root
        gocd:
          packages:
              yum:
                curl: []
                rsync: []
                git: []
          files:
            '/etc/yum.repos.d/gocd.repo':
              content: !Sub |
                [gocd]
                name     = GoCD YUM Repository
                baseurl  = https://download.gocd.io
                enabled  = 1
                gpgcheck = 1
                gpgkey   = https://download.gocd.io/GOCD-GPG-KEY.asc
              mode: '000500'
              owner: root
              group: root
            '/root/init.sh':
              content: !Sub |
                #!/bin/bash -xe
                echo running /root/init.sh
                yum update -y
                #install java
                yum install -y java-1.8.0-openjdk
                alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
                # install go-server
                yum install -y go-agent                
              mode: '000500'
              owner: root
              group: root
          commands:
            01_init:
              command: /root/init.sh
              cwd: /root
        # aws:
        #   packages:
        #       yum:
        #         emacs: []
        #         screen: []
        #   files:
        #     /var/awslogs/etc/awslogs.conf:
        #       content: !Sub |
        #         [general]
        #         state_file = /var/lib/awslogs/agent-state
        #         [/var/log/messages]
        #         datetime_format = %b %d %H:%M:%S
        #         file = /var/log/messages
        #         log_stream_name = {instance_id}/var/log/messages
        #         log_group_name = ${WebServerLogs}
        #         # [/var/log/secure]
        #         # datetime_format = %b %d %H:%M:%S
        #         # file = /var/log/secure
        #         # log_stream_name = {instance_id}/var/log/secure
        #         # log_group_name = ${WebServerLogs}
        #         # [/var/log/cron]
        #         # datetime_format = %b %d %H:%M:%S
        #         # file = /var/log/cron
        #         # log_stream_name = {instance_id}/var/log/cron
        #         # log_group_name = ${WebServerLogs}
        #         [/var/log/cloud-init.log]
        #         datetime_format = %b %d %H:%M:%S
        #         file = /var/log/cloud-init.log
        #         log_stream_name = {instance_id}/var/log/cloud-init.log
        #         log_group_name = ${WebServerLogs}
        #         [/var/log/cfn-init.log]
        #         datetime_format = %Y-%m-%d %H:%M:%S
        #         file = /var/log/cfn-init.log
        #         log_stream_name = {instance_id}/var/log/cfn-init.log
        #         log_group_name = ${WebServerLogs}
        #         [/var/log/cfn-hup.log]
        #         datetime_format = %Y-%m-%d %H:%M:%S
        #         file = /var/log/cfn-hup.log
        #         log_stream_name = {instance_id}/var/log/cfn-hup.log
        #         log_group_name = ${WebServerLogs}
        #         [/var/log/cfn-init-cmd.log]
        #         datetime_format = %Y-%m-%d %H:%M:%S
        #         file = /var/log/cfn-init-cmd.log
        #         log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
        #         log_group_name = ${WebServerLogs}
        #         [/var/log/cloud-init-output.log]
        #         file = /var/log/cloud-init-output.log
        #         log_stream_name = {instance_id}/var/log/cloud-init-output.log
        #         log_group_name = ${WebServerLogs}
        #         [/var/log/dmesg]
        #         file = /var/log/dmesg
        #         log_stream_name = {instance_id}/var/log/dmesg
        #         log_group_name = ${WebServerLogs}
        #       mode: 000644
        #       owner: root
        #       group: root
        #   services:
        #     sysvinit:
        #       awslogs:
        #         enabled: true
        #         ensureRunning: true
        #         files:
        #         - /var/awslogs/etc/awslogs.conf
        #         - /var/awslogs/etc/aws.conf
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref WebServerInstanceType, Arch ]]
      InstanceType: !Ref WebServerInstanceType
      SecurityGroups:
      - !Ref WebServerSecurityGroup
      KeyName: !Ref WebServerKeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          echo "using config version: ${BuildVersion}"
          yum -y update
          # run cfn-init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}          
          # open security group ingress to gocd server load balancer
          INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          SG_LOOKUP=$(aws ec2 describe-security-groups --group-ids ${GoCDServerInstanceSGId} --filter Name=ip-permission.group-id,Values=${WebServerSecurityGroup} Name=ip-permission.from-port,Values=8154 --output text --query "SecurityGroups[].GroupId" --region ${AWS::Region}) && echo $SG_LOOKUP          
          if [ -z $SG_LOOKUP ];
            then echo updated sg access...;
            aws ec2 authorize-security-group-ingress --group-id ${GoCDServerInstanceSGId} --source-group ${WebServerSecurityGroup} --protocol tcp --port 8154 --region ${AWS::Region};
          else
            echo already authorized;
          fi
          # update go-agent config
          sed -i 's|GO_SERVER_URL=https://127.0.0.1:8154/go|GO_SERVER_URL=https://${GoCDServerPrivateIP}:8154/go|g' /etc/default/go-agent
          # update ssh config and permissions
          eval `ssh-agent -s`
          mkdir -p /var/go/.ssh/
          printf "StrictHostKeyChecking no\nUserKnownHostsFile /dev/null\n" > /var/go/.ssh/config
          chown -R go:go /var/go/.ssh/
          chmod 600 /var/go/.ssh/config
          # start go-agent daemon
          /etc/init.d/go-agent start
          # run cfn-signal
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
          # check status
          /etc/init.d/go-agent status

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      VPCZoneIdentifier:
      # - Fn::ImportValue: !Sub ${ParentVPCStack}-PublicSubnet1
      # - Fn::ImportValue: !Sub ${ParentVPCStack}-PublicSubnet2
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      NotificationConfigurations:
      - TopicARN:
          !Ref NotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      - PropagateAtLaunch: true
        Value: !Ref TagName
        Key: Name
      - PropagateAtLaunch: true
        Value: !Ref TagOwner
        Key: owner
      - PropagateAtLaunch: true
        Value: !Ref TagClient
        Key: client
      - PropagateAtLaunch: true
        Value: !Ref TagProject
        Key: project
      - PropagateAtLaunch: true
        Value: !Ref TagEnvironment
        Key: environment
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT10M
        WaitOnResourceSignals: true

  ScalingUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentStep: 1
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 900
      ScalingAdjustment: 25

  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Average
      Threshold: 75
      AlarmDescription: Alarm if CPU load is high.
      Period: 60
      AlarmActions:
      - !Ref ScalingUpPolicy
      - !Ref NotificationTopic
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ScalingDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentStep: 1
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -25

  CPULowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 15
      Statistic: Average
      Threshold: 25
      AlarmDescription: Alarm if CPU load is low.
      Period: 60
      AlarmActions:
      - !Ref ScalingDownPolicy
      - !Ref NotificationTopic
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
