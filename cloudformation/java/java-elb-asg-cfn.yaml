---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template Version 0.1.0. Launch an Amazon Linux EC2
  instance within a ASG to maintain HA/FT.

Mappings:
  AWSInstanceType2Arch:
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-a4c7edb2
    us-west-1:
      HVM64: ami-327f5352
    us-west-2:
      HVM64: ami-6df1e514
    ap-southeast-1:
      HVM64: ami-77af2014

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Instance Settings
      Parameters:
      - InstanceType
      - KeyName
      - OperatorEmail
    - Label:
        default: Java Server Settings
      Parameters:
      - JavaVersion
      - JavaOpts
    - Label:
        default: Network Settings
      Parameters:
      - VPCID
      - SubnetPublic1
      - SubnetPublic2
      # - SubnetPrivate1
      # - SubnetPrivate2
      - SSHLocation
      - AccessLocation
      # - BastionSecurityGroup
    - Label:
        default: ELB & ASG Settings
      Parameters:
      - HealthCheckPort
      - HealthCheckPath
      - MaxInstanceCount
      - MinInstanceCount
      - DesiredInstanceCount
      - SSLCertificateId
    - Label:
        default: Deployment
      Parameters:
      - BuildBucket
      - DeployPackage
      - BuildVersion
      - EnvVars
    # - Label:
    #     default: NewRelic Settings
    #   Parameters:
    #   - NewRelicKey
    - Label:
        default: Tags
      Parameters:
      - TagName
      - TagOwner
      - TagClient
      - TagProject
      - TagEnvironment

Parameters:
  BuildBucket:
    Default: bucket-name/path
    Description: Main Bucket and Path where the deploy source is installed. NOTE - should not start or end with slash.
    Type: String
  BuildVersion:
    Default: <version>
    Description: The custom script that instances will run on boot
    Type: String
  EnvVars:
    Default: <envvars>
    Description: seperated by space ex. key1=value key2=value
    Type: String
  DeployPackage:
    Default: <package.tgz>
    Description: Name of the compressed source package to be deployed. Should be full file name including extension.
    Type: String
  SSLCertificateId:
    Default: <ssl-cert-arn>
    Description: ARN of the SSL cert that will be used by the Load Balancer
    Type: String
  InstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: WebServer EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: <key-pair>
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  HealthCheckPort:
    Default: 8080
    Description: The port that the healthcheck should request
    Type: Number
  HealthCheckPath:
    Default: /api/status
    Description: The path that the healthcheck should request - should start with /
    MaxLength: 127
    MinLength: 1
    Type: String
  MaxInstanceCount:
    Default: 1
    Description: The maximum no of instances the ASG allows
    Type: Number
  MinInstanceCount:
    Default: 1
    Description: The minimum no of instances the ASG allows
    Type: Number
  DesiredInstanceCount:
    Default: 1
    Description: The minimum no of instances the ASG allows
    Type: Number
  JavaVersion:
    Default: 7
    Description: The version of Java to run on the instance.
    AllowedValues:
      - 7
      - 8
    Type: String
  JavaOpts:
    Default: <arg1> <arg2> <arg3>
    Description: The Opts that will be passed into the Java server, seperated by space.
    MaxLength: 127
    MinLength: 0
    Type: String
  OperatorEmail:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
    Default: your.name@rga.com
    Description: E-Mail address to notify if there are any scaling operations
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    # Default: x.x.x.x/32
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: 18
    MinLength: 9
    Type: String
  AccessLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    # Default: x.x.x.x/32
    Description: The IP address range that can be used to access the ELB
    MaxLength: 18
    MinLength: 9
    Type: String
  # BastionSecurityGroup:
  #   Default: sg-<id>
  #   Description: First Public subnet you want to use
  #   Type: AWS::EC2::SecurityGroup::Id
  # SubnetPrivate1:
  #   Default: subnet-<id>
  #   Description: First Public subnet you want to use
  #   Type: AWS::EC2::Subnet::Id
  # SubnetPrivate2:
  #   Default: subnet-<id>
  #   Description: Second Public subnet you want to use
  #   Type: AWS::EC2::Subnet::Id
  SubnetPublic1:
    Default: subnet-<id>
    Description: First Public subnet you want to use
    Type: AWS::EC2::Subnet::Id
  SubnetPublic2:
    Default: subnet-<id>
    Description: Second Public subnet you want to use
    Type: AWS::EC2::Subnet::Id
  TagClient:
    Default: <tag-client>
    Description: Tag used for client of the resource
    MaxLength: 127
    MinLength: 1
    Type: String
  TagEnvironment:
    AllowedValues:
    - dev
    - qa
    - stg
    - prd
    - test
    Default: dev
    Description: Tag used for environment associated with resource.
    MaxLength: 127
    MinLength: 1
    Type: String
  TagName:
    Default: <tag-name>
    Description: Tag used for Name of the resource
    MaxLength: 127
    MinLength: 1
    Type: String
  TagOwner:
    Default: <tag-owner>
    Description: Tag used for the owner of the resource created (email address).
    MaxLength: 127
    MinLength: 1
    Type: String
  TagProject:
    Default: <tag-project>
    Description: Tag used for project associated with resource.
    MaxLength: 127
    MinLength: 1
    Type: String
  UserDataScript:
    Default: echo sample init script
    Description: The custom script that instances will run on boot
    Type: String
  VPCID:
    Default: vpc-<id>
    Description: VPC ID of the VPC you want to deploy the server in
    Type: AWS::EC2::VPC::Id
  # NewRelicKey:
  #   Type: String
  #   Default: <newrelic-key>

Resources:
  AssumeRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
          - Action:
            - s3:*
            Effect: Allow
            Resource:
            - !Join [ "", [ "arn:aws:s3:::", !Ref BuildBucket] ]
            - !Join [ "", [ "arn:aws:s3:::", !Ref BuildBucket, "/*"] ]
          Version: "2012-10-17"
        PolicyName: DescribeInstances
    Type: AWS::IAM::Role

  CPUAlarmHigh:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleUpPolicy
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref ServerASG
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: 90
    Type: AWS::CloudWatch::Alarm

  CPUAlarmLow:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleDownPolicy
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref ServerASG
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: 70
    Type: AWS::CloudWatch::Alarm

  LatencyAlarmHigh:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleUpPolicy
      AlarmDescription: Scale-up if Latency > 5 seconds for 2 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ElasticLoadBalancer
        Value:
          !Ref ElasticLoadBalancer
      EvaluationPeriods: 2
      MetricName: Latency
      Namespace: AWS/ELB
      Period: 60
      Statistic: Average
      Threshold: 5
    Type: AWS::CloudWatch::Alarm

  LatencyAlarmLow:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleDownPolicy
      AlarmDescription: Scale-down if Latency < 5 seconds for 6 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: ElasticLoadBalancer
        Value:
          !Ref ElasticLoadBalancer
      EvaluationPeriods: 2
      MetricName: Latency
      Namespace: AWS/ELB
      Period: 180
      Statistic: Average
      Threshold: 5
    Type: AWS::CloudWatch::Alarm

  ElasticLoadBalancer:
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: 3
        Interval: 30
        Target:
          !Join [ "", [ "HTTP:", !Ref HealthCheckPort, !Ref HealthCheckPath ] ]
        Timeout: 5
        UnhealthyThreshold: 5
      ConnectionSettings:
        IdleTimeout: 300
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
      Listeners:
      - InstancePort: !Ref HealthCheckPort
        LoadBalancerPort: 80
        Protocol: HTTP
      - InstancePort: !Ref HealthCheckPort
        InstanceProtocol: HTTP
        LoadBalancerPort: 443
        Protocol: HTTPS
        SSLCertificateId: !Ref SSLCertificateId
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
      - !Ref SubnetPublic1
      - !Ref SubnetPublic2
    Type: AWS::ElasticLoadBalancing::LoadBalancer

  InstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
      - CidrIp:
          !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - FromPort: !Ref HealthCheckPort
        IpProtocol: tcp
        SourceSecurityGroupId:
          !Ref LoadBalancerSecurityGroup
        ToPort: !Ref HealthCheckPort
      Tags:
      - Key: Name
        Value:
          !Join ["", [ !Ref TagName, "-ec2-sg" ] ]
      - Key: client
        Value:
          !Ref TagClient
      - Key: owner
        Value:
          !Ref TagOwner
      - Key: project
        Value:
          !Ref TagProject
      - Key: environment
        Value:
          !Ref TagEnvironment
      VpcId:
        !Ref VPCID
    Type: AWS::EC2::SecurityGroup

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            [setup, java-install, app-install]
        setup:
          packages:
            yum:
              emacs: []
              screen: []
              git: []
          files:
            '/etc/cron.daily/yumupdate':
              content: !Sub |
                #!/bin/bash -xe
                YUM=/usr/bin/yum
                # -y == assume yes
                # -d == debug verbosity
                # -e == error-reporting level
                # -R == wait 0~n min before running the command (randomise)
                # clear all packages, dependency headers, metadata and metadata cache
                $YUM -y -d 0 -e 0 clean all
                # update the yum package itself
                $YUM -y -d 0 -e 0 update yum
                # update everything
                $YUM -y -R 10 -e 0 -d 0 update --security
                #IF YOU JUST WANT TO INSTALL SECURITY UPDATES ADD —security
                yum -y update --security
              mode: '000500'
              owner: root
              group: root
        java-install:
          files:
            '/root/java-install.sh':
              content: !Sub |
                #!/bin/bash -xe
                echo // running java-install ...
                echo use ${JavaVersion}
                # java 7 (installed by default)
                #yum install -y java-1.7.0-openjdk java-1.7.0-openjdk-devel
                # java 8
                if [ ${JavaVersion} == 8 ] 
                then
                  yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel
                  alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
                fi
                echo installing maven
                wget https://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
                sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
                yum install -y apache-maven
                echo ****************
                java -version
                mvn --version
                echo // java-install done ...
              mode: '000500'
              owner: root
              group: root
          commands:
            01_init:
              command: '/root/java-install.sh'
              cwd: '/root'
        app-install:
          files:
            '/opt/java/app/envvars':
              content: !Sub |
                export VERSION=${BuildVersion}
                export ENV=${TagEnvironment}
                export REGION=${AWS::Region}
                export STACK=${AWS::StackName}
              mode: '000500'
              owner: root
              group: root
            '/root/app-install.sh':
              content: !Sub |
                #!/bin/bash -xe
                echo // running app-install ...
                mkdir -p /opt/java/app/
                cd /opt/java/app/
                export PATH=/usr/local/bin:$PATH
                aws s3 cp s3://${BuildBucket}/${DeployPackage} .
                tar -xvf ${DeployPackage}
                mvn clean package
                JAR_PATH=$(find target -name '*.jar' | head -n 1)
                cp -f $JAR_PATH app.jar
                # if {$EnvVars} export
                echo export IP_ADDRESS=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 | sed -r "s:[0-9]*\\.[0-9]*\\.[0-9]*\\.([0-9]*):xxx\\.xxx\\.xxx\\.\\1:g") >> /opt/java/app/envvars
                echo export DEPLOY_DATE=$(date +%Y%m%d%H%M%S) >> /opt/java/app/envvars
                echo // app-install done ...
              mode: '000500'
              owner: root
              group: root
            '/etc/init.d/vrsr':
              content: !Sub |
                #!/bin/bash -e
                ### BEGIN INIT INFO
                # Provides:
                # Required-Start:    $remote_fs $syslog
                # Required-Stop:     $remote_fs $syslog
                # Default-Start:     2 3 4 5
                # Default-Stop:      0 1 6
                # Short-Description: Start daemon at boot time
                # Description:       Enable service provided by daemon.
                ### END INIT INFO

                dir="/opt/java/app/"
                cmd="java8 ${JavaOpts} -Djava.security.egd=file:/dev/./urandom -jar /opt/java/app/app.jar"
                user="root"

                name=`basename $0`
                pid_file="/var/run/$name.pid"
                stdout_log="/var/log/$name.log"
                stderr_log="/var/log/$name.err"

                get_pid() {
                    cat "$pid_file"
                }

                is_running() {
                    [ -f "$pid_file" ] && ps -p `get_pid` > /dev/null 2>&1
                }

                case "$1" in
                    start)
                    if is_running; then
                        echo "Already started"
                    else
                        echo "Starting $name"
                        cd "$dir"
                        if [ -z "$user" ]; then
                            sudo $cmd >> "$stdout_log" 2>> "$stderr_log" &
                        else
                            sudo -u "$user" $cmd >> "$stdout_log" 2>> "$stderr_log" &
                        fi
                        echo $! > "$pid_file"
                        if ! is_running; then
                            echo "Unable to start, see $stdout_log and $stderr_log"
                            exit 1
                        fi
                    fi
                    ;;
                    stop)
                    if is_running; then
                        echo -n "Stopping $name.."
                        kill `get_pid`
                        for i in 1 2 3 4 5 6 7 8 9 10
                        # for i in `seq 10`
                        do
                            if ! is_running; then
                                break
                            fi

                            echo -n "."
                            sleep 1
                        done
                        echo

                        if is_running; then
                            echo "Not stopped; may still be shutting down or shutdown may have failed"
                            exit 1
                        else
                            echo "Stopped"
                            if [ -f "$pid_file" ]; then
                                rm "$pid_file"
                            fi
                        fi
                    else
                        echo "Not running"
                    fi
                    ;;
                    restart)
                    $0 stop
                    if is_running; then
                        echo "Unable to stop, will not attempt to start"
                        exit 1
                    fi
                    $0 start
                    ;;
                    status)
                    if is_running; then
                        echo "Running"
                    else
                        echo "Stopped"
                        exit 1
                    fi
                    ;;
                    *)
                    echo "Usage: $0 {start|stop|restart|status}"
                    exit 1
                    ;;
                esac

                exit 0
              mode: '000755'
              owner: root
              group: root
          commands:
            01_init:
              command: '/root/app-install.sh'
              cwd: '/root'
    Properties:
      # AssociatePublicIpAddress: false
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        !Ref RootInstanceProfile
      ImageId:
        !FindInMap [ AWSRegionArch2AMI, !Ref "AWS::Region", !FindInMap [ AWSInstanceType2Arch, !Ref InstanceType, Arch ] ]
      InstanceType:
        !Ref InstanceType
      KeyName:
        !Ref KeyName
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          echo building version ${BuildVersion}
          echo // running userdata ...
          source /etc/profile
          echo // updating yum ...
          yum update -y
          echo // installing awscli ...
          cd /usr/src/
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          tar xvf aws-cfn-bootstrap-latest.tar.gz
          cd aws-cfn-bootstrap-1.4/
          python setup.py build
          python setup.py install
          echo // running cfn init ...
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          source /opt/java/app/envvars
          echo running app as $(whoami) ...
          service vrsr start
          cd ~/
          sleep 30s
          echo // testing healthcheck ...
          curl --head --fail localhost:${HealthCheckPort}${HealthCheckPath}
          /usr/local/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource ServerASG --region ${AWS::Region}
          echo // cfn stack completed successfully ...
          echo // done
          ${UserDataScript}

  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Enable access to the load balancer
      SecurityGroupIngress:
      - CidrIp: !Ref AccessLocation
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref AccessLocation
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value:
          !Join ["", [ !Ref TagName, "-elb-sg"] ]
      - Key: client
        Value:
          !Ref TagClient
      - Key: owner
        Value:
          !Ref TagOwner
      - Key: project
        Value:
          !Ref TagProject
      - Key: environment
        Value:
          !Ref TagEnvironment
      VpcId:
        !Ref VPCID
    Type: AWS::EC2::SecurityGroup

  NotificationTopic:
    Properties:
      Subscription:
      - Endpoint:
          !Ref OperatorEmail
        Protocol: email
    Type: AWS::SNS::Topic

  RootInstanceProfile:
    Properties:
      Path: /
      Roles:
      - !Ref AssumeRole
    Type: AWS::IAM::InstanceProfile

  ServerASG:
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      DesiredCapacity:
        !Ref DesiredInstanceCount
      LaunchConfigurationName:
        !Ref LaunchConfig
      LoadBalancerNames:
      - !Ref ElasticLoadBalancer
      MaxSize:
        !Ref MaxInstanceCount
      MinSize:
        !Ref MinInstanceCount
      NotificationConfigurations:
      - NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        TopicARN:
          !Ref NotificationTopic
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          !Join ["", [ !Ref TagName, "-asg" ] ]
      - Key: client
        PropagateAtLaunch: true
        Value:
          !Ref TagClient
      - Key: owner
        PropagateAtLaunch: true
        Value:
          !Ref TagOwner
      - Key: project
        PropagateAtLaunch: true
        Value:
          !Ref TagProject
      - Key: environment
        PropagateAtLaunch: true
        Value:
          !Ref TagEnvironment
      VPCZoneIdentifier:
      # - !Ref SubnetPrivate1
      # - !Ref SubnetPrivate2
      - !Ref SubnetPublic1
      - !Ref SubnetPublic2
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT10M
        WaitOnResourceSignals: true

  WebServerScaleDownPolicy:
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        !Ref ServerASG
      Cooldown: 60
      ScalingAdjustment: -1
    Type: AWS::AutoScaling::ScalingPolicy

  WebServerScaleUpPolicy:
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        !Ref ServerASG
      Cooldown: 60
      ScalingAdjustment: 1
    Type: AWS::AutoScaling::ScalingPolicy
