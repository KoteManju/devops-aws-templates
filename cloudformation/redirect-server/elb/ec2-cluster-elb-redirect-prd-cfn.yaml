---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template Version 0.1.0. Launch an Amazon Linux EC2
  instance within a ASG and with an ELB to maintain HA/FT.

Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.xlarge:
      Arch: HVM64

  # AMI's are running AWS Linux
  # Details and updates can be found here:
  # https://aws.amazon.com/amazon-linux-ami/
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0b33d91d
    us-west-1:
      HVM64: ami-165a0876
    us-west-2:
      HVM64: ami-f173cc91
    ap-southeast-1:
      HVM64: ami-dc9339bf

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Instance Settings
      Parameters:
      - InstanceType
      - KeyName
      - OperatorEmail
    - Label:
        default: Network Settings
      Parameters:
      - VPCID
      - SubnetPublic1
      - SubnetPublic2
      - SSHLocation
    - Label:
        default: Redirect Server
      Parameters:
      - RedirectURL
    - Label:
        default: ELB and ASG Settings
      Parameters:
      - HealthCheckPort
      - HealthCheckPath
      - MaxInstanceCount
      - MinInstanceCount
      - DesiredInstanceCount
      - SSLCertificateId
    - Label:
        default: Tags
      Parameters:
      - TagName
      - TagOwner
      - TagClient
      - TagProject
      - TagEnvironment
Parameters:
  DesiredInstanceCount:
    Default: 1
    Description: The minimum no of instances the ASG allows
    Type: Number
  SSLCertificateId:
    Default: <ssl-cert-id>
    Description: Name of the SSL cert that will be used by the Load Balancer
    Type: String
  InstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: WebServer EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: <key-pair>
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  HealthCheckPort:
    Default: 80
    Description: The port that the healthcheck should request
    Type: Number
  HealthCheckPath:
    Default: /status
    Description: The path that the healthcheck should request - should start with /, and needs to be more than just a /
    MaxLength: 127
    MinLength: 1
    Type: String
  MaxInstanceCount:
    Default: 3
    Description: The maximum no of instances the ASG allows
    Type: Number
  MinInstanceCount:
    Default: 1
    Description: The minimum no of instances the ASG allows
    Type: Number
  OperatorEmail:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
    Default: your.name@rga.com
    Description: E-Mail address to notify if there are any scaling operations
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    # Default: x.x.x.x/32
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: 18
    MinLength: 9
    Type: String
  RedirectURL:
    Default: <redirect-url>
    Description: The URL that the server will be redirected to
    MaxLength: 127
    MinLength: 1
    Type: String
  SubnetPublic1:
    Default: subnet-<id>
    Description: First Public subnet you want to use
    Type: AWS::EC2::Subnet::Id
  SubnetPublic2:
    Default: subnet-<id>
    Description: Second Public subnet you want to use
    Type: AWS::EC2::Subnet::Id
  TagClient:
    Default: <tag-client>
    Description: Tag used for client of the resource
    MaxLength: 127
    MinLength: 1
    Type: String
  TagEnvironment:
    AllowedValues:
    - dev
    - qa
    - stg
    - prd
    - test
    Default: dev
    Description: Tag used for environment associated with resource.
    MaxLength: 127
    MinLength: 1
    Type: String
  TagName:
    Default: <tag-name>
    Description: Tag used for Name of the resource
    MaxLength: 127
    MinLength: 1
    Type: String
  TagOwner:
    Default: <tag-owner>
    Description: Tag used for the owner of the resource created (email address).
    MaxLength: 127
    MinLength: 1
    Type: String
  TagProject:
    Default: <tag-project>
    Description: Tag used for project associated with resource.
    MaxLength: 127
    MinLength: 1
    Type: String
  UserDataScript:
    Default: echo sample init script
    Description: The custom script that instances will run on boot
    Type: String
  VPCID:
    Default: vpc-<id>
    Description: VPC ID of the VPC you want to deploy the server in
    Type: AWS::EC2::VPC::Id
Resources:
  AssumeRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
          Version: "2012-10-17"
        PolicyName: DescribeInstances
    Type: AWS::IAM::Role
  CPUAlarmHigh:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleUpPolicy
      AlarmDescription: Scale-up if CPU > 90% for 5 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref ServerASG
      EvaluationPeriods: 5
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 90
    Type: AWS::CloudWatch::Alarm
  CPUAlarmLow:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleDownPolicy
      AlarmDescription: Scale-down if CPU < 70% for 5 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref ServerASG
      EvaluationPeriods: 5
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 70
    Type: AWS::CloudWatch::Alarm
  LatencyAlarmHigh:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleUpPolicy
      AlarmDescription: Scale-up if Latency > 5 seconds for 2 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ElasticLoadBalancer
        Value:
          !Ref ElasticLoadBalancer
      EvaluationPeriods: 2
      MetricName: Latency
      Namespace: AWS/ELB
      Period: 60
      Statistic: Average
      Threshold: 5
    Type: AWS::CloudWatch::Alarm
  LatencyAlarmLow:
    Properties:
      AlarmActions:
      - !Ref WebServerScaleDownPolicy
      AlarmDescription: Scale-down if Latency < 5 seconds for 6 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: ElasticLoadBalancer
        Value:
          !Ref ElasticLoadBalancer
      EvaluationPeriods: 2
      MetricName: Latency
      Namespace: AWS/ELB
      Period: 180
      Statistic: Average
      Threshold: 5
    Type: AWS::CloudWatch::Alarm
  ElasticLoadBalancer:
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: 3
        Interval: 30
        Target:
          !Join [ "", [ "HTTP:", !Ref HealthCheckPort, !Ref HealthCheckPath ] ]
        Timeout: 5
        UnhealthyThreshold: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
      Listeners:
      - InstancePort: !Ref HealthCheckPort
        LoadBalancerPort: 80
        Protocol: HTTP
      - InstancePort: !Ref HealthCheckPort
        InstanceProtocol: HTTP
        LoadBalancerPort: 443
        Protocol: HTTPS
        SSLCertificateId: !Ref SSLCertificateId
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
      - !Ref SubnetPublic1
      - !Ref SubnetPublic2
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  InstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      SecurityGroupIngress:
      - CidrIp:
          !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - FromPort: !Ref HealthCheckPort
        IpProtocol: tcp
        SourceSecurityGroupId:
          !Ref LoadBalancerSecurityGroup
        ToPort: !Ref HealthCheckPort
      Tags:
      - Key: Name
        Value:
          !Join ["", [ !Ref TagName, "-ec2-sg" ] ]
      - Key: client
        Value:
          !Ref TagClient
      - Key: owner
        Value:
          !Ref TagOwner
      - Key: project
        Value:
          !Ref TagProject
      - Key: environment
        Value:
          !Ref TagEnvironment
      VpcId:
        !Ref VPCID
    Type: AWS::EC2::SecurityGroup
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            [setup, nginx-install]
        setup:
          packages:
            yum:
              emacs: []
              screen: []
              nginx: []
          files:
            '/etc/cron.daily/yumupdate':
              content: !Sub |
                #!/bin/bash -xe
                YUM=/usr/bin/yum
                # -y == assume yes
                # -d == debug verbosity
                # -e == error-reporting level
                # -R == wait 0~n min before running the command (randomise)
                # clear all packages, dependency headers, metadata and metadata cache
                $YUM -y -d 0 -e 0 clean all
                # update the yum package itself
                $YUM -y -d 0 -e 0 update yum
                # update everything
                $YUM -y -R 10 -e 0 -d 0 update --security
                #IF YOU JUST WANT TO INSTALL SECURITY UPDATES ADD —security
                yum -y update --security
              mode: '000500'
              owner: root
              group: root
        nginx-install:
          files:
            '/etc/nginx/nginx.conf':
              content: !Sub |
                user www-data;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                pid /var/run/nginx.pid;

                events {
                    worker_connections 1024;
                }

                http {
                    keepalive_timeout   65;
                    types_hash_max_size 2048;

                  server {
                        listen 80;
                        server_name yearwithuber.com;

                        location ${HealthCheckPath} {
                          return 200;
                        }

                        location / {
                          return 301 https://${RedirectURL}$request_uri;
                          access_log /var/log/nginx/access.log;
                          error_log /var/log/nginx/error.log;
                        }
                  }
                }
              mode: '000644'
              owner: root
              group: root
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        !Ref RootInstanceProfile
      ImageId:
        !FindInMap [ AWSRegionArch2AMI, !Ref "AWS::Region", !FindInMap [ AWSInstanceType2Arch, !Ref InstanceType, Arch ] ]
      InstanceType:
        !Ref InstanceType
      KeyName:
        !Ref KeyName
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          echo // running userdata ...
          source /etc/profile
          echo // updating yum ...
          yum update -y
          echo // installing awscli ...
          cd /usr/src/
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          tar xvf aws-cfn-bootstrap-latest.tar.gz
          cd aws-cfn-bootstrap-1.4/
          python setup.py build
          python setup.py install
          echo // running cfn init ...
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          cd ~/
          adduser www-data
          service nginx restart
          sleep 5s
          echo // testing healthcheck ...
          curl --head --fail localhost:${HealthCheckPort}${HealthCheckPath}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ServerASG --region ${AWS::Region}
          echo // cfn stack completed successfully ...
          echo // done
          ${UserDataScript}
  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Enable access to the load balancer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: !Ref HealthCheckPort
        IpProtocol: tcp
        ToPort: !Ref HealthCheckPort
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value:
          !Join ["", [ !Ref TagName, "-elb-sg"] ]
      - Key: client
        Value:
          !Ref TagClient
      - Key: owner
        Value:
          !Ref TagOwner
      - Key: project
        Value:
          !Ref TagProject
      - Key: environment
        Value:
          !Ref TagEnvironment
      VpcId:
        !Ref VPCID
    Type: AWS::EC2::SecurityGroup
  NotificationTopic:
    Properties:
      Subscription:
      - Endpoint:
          !Ref OperatorEmail
        Protocol: email
    Type: AWS::SNS::Topic
  RootInstanceProfile:
    Properties:
      Path: /
      Roles:
      - !Ref AssumeRole
    Type: AWS::IAM::InstanceProfile
  ServerASG:
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      DesiredCapacity:
        !Ref DesiredInstanceCount
      LaunchConfigurationName:
        !Ref LaunchConfig
      LoadBalancerNames:
      - !Ref ElasticLoadBalancer
      MetricsCollection:
      -
        Granularity: "1Minute"
      MaxSize:
        !Ref MaxInstanceCount
      MinSize:
        !Ref MinInstanceCount
      NotificationConfigurations:
      - NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        TopicARN:
          !Ref NotificationTopic
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value:
          !Join ["", [ !Ref TagName, "-asg" ] ]
      - Key: client
        PropagateAtLaunch: true
        Value:
          !Ref TagClient
      - Key: owner
        PropagateAtLaunch: true
        Value:
          !Ref TagOwner
      - Key: project
        PropagateAtLaunch: true
        Value:
          !Ref TagProject
      - Key: environment
        PropagateAtLaunch: true
        Value:
          !Ref TagEnvironment
      VPCZoneIdentifier:
       - !Ref SubnetPublic1
       - !Ref SubnetPublic2
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 2
        MinInstancesInService: 2
        PauseTime: PT15M
        WaitOnResourceSignals: true
  WebServerScaleDownPolicy:
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        !Ref ServerASG
      Cooldown: 60
      ScalingAdjustment: -1
    Type: AWS::AutoScaling::ScalingPolicy
  WebServerScaleUpPolicy:
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        !Ref ServerASG
      Cooldown: 60
      ScalingAdjustment: 1
    Type: AWS::AutoScaling::ScalingPolicy
